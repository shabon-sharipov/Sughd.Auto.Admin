@page "/login"
<MudText Typo="Typo.h6" Color="Color.Error" Align="Align.Center">@errorMessage</MudText>
<MudContainer Class="mt-15">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string"
                                  Label="Email"
                                  Required="true"
                                  @bind-Value="email"
                                  For="@(() => email)"
                                  RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                    <MudTextField T="string"
                                  Label="Password"
                                  @bind-Value="password"
                                  For="@(() => password)"
                                  Required="true"
                                  InputType="InputType.Password"
                                  RequiredError="Password is required!"/>
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="async () => await LogIn()">
                    Register
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           DisableElevation="true"
                           OnClick="@(() => form.ResetAsync())">
                    Reset
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    string errorMessage = "";
    string email = "";
    string password = "";


    private async Task LogIn()
    {
        await form.Validate();
        if (form.IsValid)
        {
           var response = await _authService.Login(email, password);
          
           if (string.IsNullOrEmpty(response.AccessToken))
           {
               errorMessage = "Email or password is invalid!";
               return;  
           }
            StateHasChanged();
            Navigation.NavigateTo("/dashboard");
        }
    }

}