@page "/AddCar"
@using System.Net.Http.Headers

<MudButton OnClick="@(() => NavigateToCarsPage())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Info" Size="Size.Small"></MudButton>
<MudContainer Class="mt-15">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudText Align="Align.Center" Class="mb-n4">Car Registration</MudText>
                <MudForm @ref="@form">
                    <MudTextField @bind-Value="_car.CarNumber"
                                  For="@(() => _car.CarNumber)"
                                  Immediate="true"
                                  Label="Номер автомобил"
                                  Id=""/>
                    <MudTextField @bind-Value="_car.DateOfPablisher"
                                  For="@(() => _car.DateOfPablisher)"
                                  Immediate="true"
                                  Label="Год выпуска"
                                  Id=""/>
                    <MudTextField @bind-Value="_car.Price"
                                  For="@(() => _car.Price)"
                                  Immediate="true"
                                  Label="Цена"
                                  Id=""/>
                    <MudTextField @bind-Value="_car.EngineCapacity"
                                  For="@(() => _car.EngineCapacity)"
                                  Immediate="true"
                                  Label="Оъем двигателя"
                                  Id=""/>
                    <MudTextField @bind-Value="_car.Mileage"
                                  For="@(() => _car.Mileage)"
                                  Immediate="true"
                                  Label="Пробег"
                                  Id=""/>

                    <MudSwitch @bind-Value="_car.IsActive" Color="Color.Info" T="bool" Label="Active"/>
                    <MudSwitch @bind-Value="_car.IsRastamogeno" Color="Color.Info" T="bool" Label="Растаможен в РТ"/>

                    <MudSelect Label="Тип топлива" @bind-Value="_car.FuelType" AnchorOrigin="Origin.BottomCenter" T="string" Id="">
                        @foreach (var fuelType in _fuelTypes)
                        {
                            <MudSelectItem Value="@fuelType">@fuelType</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Коробка Передача" @bind-Value="_car.Transmission" AnchorOrigin="Origin.BottomCenter" T="string" Id="">
                        @foreach (var transmission in _transmissions)
                        {
                            <MudSelectItem Value="@transmission">@transmission</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Кузов" @bind-Value="_car.Color" AnchorOrigin="Origin.BottomCenter" T="string" Id="">
                        @foreach (var carBody in _carBodies)
                        {
                            <MudSelectItem Value="@carBody">@carBody</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Цвет" @bind-Value="_car.CarBody" AnchorOrigin="Origin.BottomCenter" T="string" Id="">
                        @foreach (var color in _colors)
                        {
                            <MudSelectItem Value="@color">@color</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Mark" @bind-Value="_car.MarkaId" AnchorOrigin="Origin.BottomCenter" T="long" Id=""
                               onchange="@(GetModelByMarkaId(_car.MarkaId))">
                        @foreach (var markaResponsModel in _carMarkaResponsModels)
                        {
                            <MudSelectItem Value="@markaResponsModel.Id">@markaResponsModel.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Модел" @bind-Value="_car.ModelId" AnchorOrigin="Origin.BottomCenter" T="long" Id="">
                        @foreach (var modelResponseModel in _carModelResponseModels)
                        {
                            <MudSelectItem Value="@modelResponseModel.Id">@modelResponseModel.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudAutocomplete T="string" Label="User phone number" @bind-Value="_phoneNumber" SearchFunc="@SearchUser" Required="true"/>

                    @* _images  *@
                    @if (_imagesForShow != null)
                    {
                        <MudText Typo="@Typo.h6">@_imagesForShow.Count() File@(_imagesForShow.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in _imagesForShow)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="UploadImage">
                    @* _images  *@
                        <ButtonTemplate>
                            <MudButton Class="m-1" HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Upload Image
                            </MudButton>
                            <MudButton Class="m-1" OnClick="DeleteImage"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Clear">
                                Clear Images
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudForm>
                <MudCardActions>
                    <MudButton
                        Class="m-1"
                        Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Save"
                        Color="Color.Tertiary"
                        Size="Size.Medium"
                        OnClick="@(async () => await SaveCar())">
                        Save
                    </MudButton>
                </MudCardActions>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code{

    [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide phone number")]
    public string _phoneNumber;

    private CarRequestModel _car = new();
    MudForm form;
    private List<string> _carBodies = new();
    private List<string> _fuelTypes = new();
    private List<string> _transmissions = new();
    private List<string> _colors = new();
    private List<CarMarkaResponsModel> ? _carMarkaResponsModels = new();
    private List<CarModelResponseModel> ? _carModelResponseModels = new();
    private List<UserInfoForSaleCarResponseModel> _userInfoForSaleCarResponseModels = new();
    IList<IBrowserFile> _imagesForShow = new List<IBrowserFile>();
    List<string> ? _imageUrlsForSetToCar = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCarDetails();
        await GetCarMarka();
    }

    private async Task SaveCar()
    {
        await form.Validate();
        if (form.IsValid)
        {
            _car.UserId = _userInfoForSaleCarResponseModels.FirstOrDefault(u => u.PhoneNumber == _phoneNumber)!.Id;
            _car.Images = _imageUrlsForSetToCar;
            var result = await _carService.Post(_car, _authenticationStateProvider);
            if (result == HttpStatusCode.OK)
            {
                Navigation.NavigateTo(PageBlazor.CARS);
            }
        }
    }

    private async Task GetCarDetails()
    {
        _fuelTypes = CarDetailsHelper.FuelType();
        _transmissions = CarDetailsHelper.Transmission();
        _carBodies = CarDetailsHelper.CarBody();
        _colors = CarDetailsHelper.Color();
    }

    private async Task GetCarMarka()
    {
        _carMarkaResponsModels = await _carDetailsService.GetCarMarka();
    }

    private async Task GetModelByMarkaId(long markaId)
    {
        if (markaId != 0)
        {
            _carModelResponseModels = await _carDetailsService.GetCarModelByMarkaId(markaId);
        }
    }

    private async Task<IEnumerable<string>> SearchUser(string phoneNumber)
    {
        if (string.IsNullOrEmpty(phoneNumber))
        {
            return new List<string>();
        }

        var userInfoForSaleCarResponseModels = await _searchService.SearchByUserName(phoneNumber);
        _userInfoForSaleCarResponseModels = userInfoForSaleCarResponseModels.ToList();
        return userInfoForSaleCarResponseModels.Select(s => s.PhoneNumber);
    }

    private async Task UploadImage(InputFileChangeEventArgs files)
    {
        IReadOnlyList<IBrowserFile> _selectedFiles;
        _selectedFiles = files.GetMultipleFiles();

        if (_selectedFiles == null || !_selectedFiles.Any())
        {
            Console.WriteLine("No files selected");
            return;
        }

        if (_selectedFiles.Count == 0) return;

        var content = new MultipartFormDataContent();

        foreach (var file in _selectedFiles)
        {
            var stream = file.OpenReadStream(file.Size);
            var contentFile = new StreamContent(stream);
            contentFile.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(contentFile, "images", file.Name);
            _imagesForShow.Add(file);
        }

        _imageUrlsForSetToCar = await _UploadImageService.UploadImageFile(content);
    }

    private void DeleteImage()
    {
        _imagesForShow.Clear();
    }

    private void NavigateToCarsPage()
    {
        Navigation.NavigateTo(PageBlazor.CARS);
    }

}