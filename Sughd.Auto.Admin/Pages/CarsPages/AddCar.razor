@page "/AddCar"
@using System.Net.Http.Headers
@using Sughd.Auto.Admin.Pages.CarsPages.MarkaPage

<MudButton OnClick="@(() => NavigateToCarsPage())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Info" Size="Size.Small"></MudButton>
<MudContainer Class="mt-15">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudText Align="Align.Center" Class="mb-n4">Car Registration</MudText>
                <MudForm @ref="@form">
                    <MudSelect Label="Mark" @bind-Value="_car.MarkaId" AnchorOrigin="Origin.BottomCenter" T="long" Id=""
                               onchange="@(GetModelByMarkaId(_car.MarkaId))">
                        @foreach (var markaResponsModel in _carMarkaResponsModels)
                        {
                            <MudSelectItem Value="@markaResponsModel.Id">@markaResponsModel.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Label="Модел" @bind-Value="_car.ModelId" AnchorOrigin="Origin.BottomCenter" T="long" Id="">
                        @foreach (var modelResponseModel in _carModelResponseModels)
                        {
                            <MudSelectItem Value="@modelResponseModel.Id">@modelResponseModel.Name</MudSelectItem>
                        }
                    </MudSelect>
                    
                    <MudTextField @bind-Value="_car.DateOfPublisher"
                                  For="@(() => _car.DateOfPublisher)"
                                  Immediate="true"
                                  Label="Год выпуска"
                                  Id=""/>
                    
                    <MudTextField @bind-Value="_car.UserPhoneNumber"
                                  For="@(() => _car.UserPhoneNumber)"
                                  Immediate="true"
                                  Label="UserPhoneNumber"
                                  Id=""/>

                    @* _images  *@
                    @if (_imagesForShow != null)
                    {
                        <MudText Typo="@Typo.h6">@_imagesForShow.Count() File@(_imagesForShow.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in _imagesForShow)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="UploadImage">
                        @* _images  *@
                        <ButtonTemplate>
                            <MudButton Class="m-1" HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@context.Id">
                                Upload Image
                            </MudButton>
                            <MudButton Class="m-1" OnClick="DeleteImage"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Clear">
                                Clear Images
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudForm>
                <MudCardActions>
                    <MudButton
                        Class="m-1"
                        Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.Save"
                        Color="Color.Tertiary"
                        Size="Size.Medium"
                        OnClick="@(async () => await SaveCar())">
                        Save
                    </MudButton>
                    <MudOverlay @bind-Visible="isVisible" DarkBackground="true" AutoClose="true"/>
                </MudCardActions>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code{

    [Required(AllowEmptyStrings = false, ErrorMessage = "Please provide phone number")]
 
    private bool isVisible;
    private CarRequestModel _car = new();
    MudForm form;
    private List<CarMarkaResponsModel> ? _carMarkaResponsModels = new();
    private List<CarModelResponseModel> ? _carModelResponseModels = new();
    private List<UserInfoForSaleCarResponseModel> _userInfoForSaleCarResponseModels = new();
    IList<IBrowserFile> _imagesForShow = new List<IBrowserFile>();
    List<string> ? _imageUrlsForSetToCar = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCarMarka();
    }

    private async Task SaveCar()
    {
        isVisible = true;
        await form.Validate();
        if (form.IsValid)
        {
            _car.Images = _imageUrlsForSetToCar;
            var result = await _carService.Post(_car, _authenticationStateProvider);
            if (result != null)
            {
                await GenerateQRCode(result);
            }
        }

        isVisible = false;
        StateHasChanged();
    }

    private async Task GetCarMarka()
    {
        _carMarkaResponsModels = await _carDetailsService.GetCarMarka();
    }

    private async Task GetModelByMarkaId(long markaId)
    {
        if (markaId != 0)
        {
            _carModelResponseModels = await _carDetailsService.GetCarModelByMarkaId(markaId);
        }
    }
    
    private async Task UploadImage(InputFileChangeEventArgs files)
    {
        isVisible = true;
        IReadOnlyList<IBrowserFile> _selectedFiles;
        _selectedFiles = files.GetMultipleFiles();

        if (_selectedFiles == null || !_selectedFiles.Any())
        {
            Console.WriteLine("No files selected");
            return;
        }

        if (_selectedFiles.Count == 0) return;

        var content = new MultipartFormDataContent();

        foreach (var file in _selectedFiles)
        {
            var stream = file.OpenReadStream(file.Size);
            var contentFile = new StreamContent(stream);
            contentFile.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(contentFile, "images", file.Name);
            _imagesForShow.Add(file);
        }

        _imageUrlsForSetToCar = await _UploadImageService.UploadImageFile(content);
        isVisible = false;
        StateHasChanged();
    }

    private void DeleteImage()
    {
        _imagesForShow.Clear();
    }

    private void NavigateToCarsPage()
    {
        Navigation.NavigateTo(PageBlazor.CARS);
    }

    #region QrCode

    private string qrCodeUrl;

    private async Task GenerateQRCode(CarResponseModels model)
    {
        if (_car != null)
        {
            var markaName = _carMarkaResponsModels!.First(m => m.Id == model.MarkaId).Name ?? "";
            var modelName = _carModelResponseModels!.First(m => m.Id == model.ModelId).Name ?? "";
            var parameters = new DialogParameters<ShowDialogForQRCode>();
            parameters.Add(x => x.MarkaName, markaName);
            parameters.Add(x => x.ModelName, modelName);
            parameters.Add(x => x.CarResponseModels, model);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
            DialogService.Show<ShowDialogForQRCode>("QRCode", parameters, options);          
        }
    }

    #endregion
}
<script>
    function printQRCode(markaName, modelName, DateOfPublisher, UserPhoneNumber, DateTime) {
        const qrCodeImage = document.getElementById('qrCodeImage').src;

        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>Print QR Code</title>
                    <style>
                        body {
                            justify-content: center;
                            align-items: center;
                            height: 100vh;
                            margin: 0;
                        }
                        div {
                          display: flex;
                          justify-content: center;
                          align-items: center;
                        }
                        img {
                            max-width: 100%;
                            max-height: 100%;
                        }
                    </style>
                </head>
                <body>
                        <span style="margin-top: 20px">
                            <p><strong>User Phone Number:</strong> ${UserPhoneNumber}</p>
                            <p><strong>Marka:</strong> ${markaName} ${modelName}</p>
                            <p><strong>DateOfPublisher:</strong> ${DateOfPublisher}</p>
                            <p><strong>Date Time:</strong> ${DateTime}</p>
                        </span>
                        <div style="margin-top: 150px">                        
                            <img id="printImage" width="350px" height="350px" src="${qrCodeImage}" alt="QR Code"/>
                        </div>
                </body>
            </html>
        `);
        
        // Ensure the image is fully loaded before printing
        printWindow.document.close();
        printWindow.onload = function() {
            printWindow.focus();
            printWindow.print();
            printWindow.close();
        };
    }
</script>
<style>
    .qr-code-container {
        text-align: center; /* Center the content */
        margin: 20px 0; /* Add some margin for spacing */
    }
    
    .qr-code-image {
        width: 100%;
        max-width: 500px; /* Set a maximum width */
        height: auto; /* Maintain aspect ratio */
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: Add a shadow for better aesthetics */
        cursor: pointer; /* Change cursor to pointer to indicate it's clickable */
    }
</style>