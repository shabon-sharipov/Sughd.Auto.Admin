@page "/Cars"
@using System.Net.Http.Headers

<MudText Typo="Typo.h6" Color="Color.Error" Align="Align.Center">@errorMessage</MudText>
<MudCardActions Class="pa-4 mr-4 mt-4 ml-4">
    <MudSwitch DisableElevation="true" @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
    <MudButton JustifyContent="" DisableElevation="true" OnClick="@(() => NavigateToAddCarPage())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" Size="Size.Small"/>
</MudCardActions>
<MudTable Items="@_cars" Hover="true"
          Class="m-4"
          ReadOnly="@ronly"
          SortLabel="Sort By"
          Loading="@_loading"
          Filter="new Func<CarResponseModels, bool>(SearchByName)"
          CanCancelEdit="@canCancelEdit"
          @bind-SelectedItem="selectedCar"
          CommitEditTooltip="Commit Edit"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cars</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.IsActive)">IsActive</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.Id)">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.MarkaName)">Марка</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel Enabled="@enabled" SortBy="new Func<CarResponseModels, object>(x => x.ModelName)">Модел</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.DateOfPublisher)">Год выпуска</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.UserPhoneNumber)">Имя пользователя</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<CarResponseModels, object>(x => x.Images)">Изображений</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudText>QRCode</MudText>
        </MudTh>
        <MudTh>
            <MudText>Удалить</MudText>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="IsActive" >
            <MudSwitch @bind-Value="@context.IsActive" @oninput="@(e => UpdateStatusCar(context.Id, context.IsActive == false ? true : false))" Color="Color.Info" T="bool"/>
        </MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="MarkaName">@context.MarkaName</MudTd>
        <MudTd DataLabel="ModelName">@context.ModelName</MudTd>
        <MudTd DataLabel="DateOfPublisher">@context.DateOfPublisher</MudTd>
        <MudTd DataLabel="UserPhoneNumber">@context.UserPhoneNumber</MudTd>
        <MudTd DataLabel="Images">
            <MudButton OnClick="@(() => OpenDialog(context.Images))" Variant="Variant.Filled" Color="Color.Primary">
                Images
            </MudButton>
        </MudTd>
        <MudTd DataLabel="QRCode">
            <MudButton OnClick="@(() => OpenQRCodeDiaog(context))" Variant="Variant.Filled" Color="Color.Primary">
                QRCode
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Delete">
            <MudButton OnClick="@(() => Delete(context.Id))" Variant="Variant.Filled" Color="Color.Error">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="IsActive">
            <MudTextFiel/>
        </MudTd>
        <MudTd DataLabel="Id">
            <MudTextFiel/>
        </MudTd>
        <MudTd DataLabel="Marka">
            <MudSelect @bind-Value="@context.MarkaId" AnchorOrigin="Origin.BottomCenter" T="long" Id=""
                       onchange="@(GetModelByMarkaId(context.MarkaId))">
                @foreach (var markaResponsModel in _carMarkaResponsModels)
                {
                    <MudSelectItem size="@Size.Medium" Value="@markaResponsModel.Id">@markaResponsModel.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Model">
            <MudSelect @bind-Value="@context.ModelId" AnchorOrigin="Origin.BottomCenter" T="long" Id="">
                @foreach (var modelResponseModel in _carModelResponseModels)
                {
                    <MudSelectItem size="@Size.Medium" Value="@modelResponseModel.Id">@modelResponseModel.Name</MudSelectItem>
                }
            </MudSelect>
        </MudTd>

        <MudTd DataLabel="DateOfPublisher">
            <MudTextField @bind-Value="@context.DateOfPublisher"/>
        </MudTd>
        <MudTd DataLabel="UserPhoneNumber">
            <MudTextField @bind-Value="@context.UserPhoneNumber"/>
        </MudTd>
        <MudTd DataLabel="Images">
            <MudButton Class="m-1" HtmlTag="label"
                       Variant="Variant.Filled"
                       OnClick="UploadImage"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload Image
            </MudButton>
        </MudTd>
        <MudTd DataLabel="QRCode">
            <MudTextFiel/>
        </MudTd>
        <MudTd DataLabel="Delete">
            <MudTextFiel/>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 25, 50, 100 }"/>
    </PagerContent>
</MudTable>

@code {
    private string errorMessage = "";
    private bool enabled = true;
    private string searchTerm = "";
    private bool ronly = true;
    private bool showIsActiveCar = true;
    private bool _loading = true;
    private bool canCancelEdit = true;
   private bool isActiveCar = false;
    private long carIdForUpdateStatus = default;
    private CarResponseModels selectedCar = null;
    private CarResponseModels carBeforeEdit = null;
    private List<CarResponseModels>? _cars = new();
    private List<CarMarkaResponsModel>? _carMarkaResponsModels = new();
    private List<CarModelResponseModel>? _carModelResponseModels = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await _authenticationStateProvider.GetToken();
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "You have not access to use Car page!";
                _loading = false;
                return;
            }
        }
        catch (Exception e)
        {
            errorMessage = "You have not access to use Car page!";
            _loading = false;
            return;
        }

        _cars = await _carService.Get(1000, 0);
        await GetCarMarka();
        _loading = false;
    }

    private bool SearchByName(CarResponseModels carResponseModels)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        if (carResponseModels.MarkaName.ToLower().Contains(searchTerm.ToLower()))
            return true;

        if (carResponseModels.ModelName.ToLower().Contains(searchTerm.ToLower()))
            return true;
        if (carResponseModels.UserPhoneNumber.Contains(searchTerm))
            return true;

        return false;
    }

    private async Task UpdateStatusCar(long Id, bool isActive)
    {
       await _carService.UpdateStatus(Id, isActive, _authenticationStateProvider);
        NavigationManager.Refresh();
    }

    private void NavigateToAddCarPage()
    {
        Navigation.NavigateTo(PageBlazor.ADD_CAR);
    }

    #region Show image in ShowImageDialog

    private void OpenDialog(List<string> images)
    {
        var parameters = new DialogParameters<ShowImageDialog>();
        parameters.Add(x => x.Images, images);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<ShowImageDialog>("Images", parameters, options);
    }

    #endregion

    private async Task Delete(long id)
    {
        await _carService.DeleteCar(id, _authenticationStateProvider);
        _cars.RemoveAll(c => c.Id == id);
    }

    private async Task OpenQRCodeDiaog(CarResponseModels context)
    {
        var parameters = new DialogParameters<ShowDialogForQRCode>();
        parameters.Add(x => x.MarkaName, context.MarkaName);
        parameters.Add(x => x.ModelName, context.ModelName);
        parameters.Add(x => x.CarResponseModels, context);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<ShowDialogForQRCode>("QRCode", parameters, options);
    }
    
    #region Update Image

    private async Task UploadImage()
    {
        var parameters = new DialogParameters<UpdateCarImage>();
        parameters.Add(x => x.CarId, selectedCar.Id);
        Console.WriteLine("CarId: " + selectedCar.Id);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<UpdateCarImage>("UpdateCarImage", parameters, options);
        ronly = true;
    }

    #endregion

    #region Edit Table

    private void BackupItem(object element)
    {
        carBeforeEdit = new()
        {
            MarkaId = ((CarResponseModels)element).MarkaId,
            ModelId = ((CarResponseModels)element).ModelId,
            MarkaName = ((CarResponseModels)element).MarkaName,
            ModelName = ((CarResponseModels)element).ModelName,
            UserPhoneNumber = ((CarResponseModels)element).UserPhoneNumber,
            DateOfPublisher = ((CarResponseModels)element).DateOfPublisher,
            Images = ((CarResponseModels)element).Images          
        };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CarResponseModels)element).MarkaId = carBeforeEdit.MarkaId;
        ((CarResponseModels)element).ModelId = carBeforeEdit.ModelId;
        ((CarResponseModels)element).ModelName = carBeforeEdit.ModelName;
        ((CarResponseModels)element).MarkaName = carBeforeEdit.MarkaName;
        ((CarResponseModels)element).UserPhoneNumber = carBeforeEdit.UserPhoneNumber;
        ((CarResponseModels)element).DateOfPublisher = carBeforeEdit.DateOfPublisher;
        ((CarResponseModels)element).Images = carBeforeEdit.Images;
    }

    private void ItemHasBeenCommitted(object element)
    {
        var carResponseModels = (CarResponseModels)element;

        var carRequest = new CarRequestModel()
        {
            MarkaId = ((CarResponseModels)element).MarkaId,
            ModelId = ((CarResponseModels)element).ModelId,
            UserPhoneNumber = ((CarResponseModels)element).UserPhoneNumber,
            DateOfPublisher = ((CarResponseModels)element).DateOfPublisher,
            Images = ((CarResponseModels)element).Images
        };

        _carService.Update(carResponseModels.Id, carRequest, _authenticationStateProvider);
    }

    #endregion

    #region Car car details

    private async Task GetCarMarka()
    {
        if (_carMarkaResponsModels == null || _carMarkaResponsModels.Count == 0)
        {
            _carMarkaResponsModels = await _carDetailsService.GetCarMarka();
        }
    }

    private async Task GetModelByMarkaId(long markaId)
    {
        if (markaId != 0)
        {
            _carModelResponseModels = await _carDetailsService.GetCarModelByMarkaId(markaId);
        }
    }

    #endregion

}